/* auto-generated by OHOS-RS */
/* eslint-disable */

export class AbortSignal {
  aborted: boolean;
  reason?: any;

  addEventListener: (
    type: "abort",
    listener: (this: AbortSignal, event: any) => any,
    options?:
      | boolean
      | {
          capture?: boolean;
          once?: boolean;
          passive?: boolean;
        }
  ) => void;

  removeEventListener: (
    type: "abort",
    listener: (this: AbortSignal, event: any) => any,
    options?:
      | boolean
      | {
          capture?: boolean;
        }
  ) => void;

  dispatchEvent: (event: any) => void;

  onabort: null | ((this: AbortSignal, event: any) => void);

  throwIfAborted(): void;

  static abort(reason?: any): AbortSignal;

  static timeout(time: number): AbortSignal;
}

export interface Test {
  id: number;
}

export declare function asyncFib(
  input: number,
  signal: AbortSignal
): Promise<unknown>;

export declare function asyncFibQos(input: number): Promise<unknown>;

export declare function loadLog(): void;

export declare function runBle(
  cb: (err: Error | null, arg: number) => void
): void;

export declare function stop(): void;

export declare function sum(left: number, right: number): number;

export declare function threadsafeFunctionFatalMode(
  v: boolean,
  cb: (arg: boolean) => unknown
): void;

export declare class Utils {
  constructor();
  sum(left: number, right: number): number;
}
